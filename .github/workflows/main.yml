name: CI/CD Kittygram

on:
  push:
    branches:
      - main

jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5.0.0
      - name: Set up Python
        uses: actions/setup-python@v5.0.0
        with:
          python-version: 3.12.7
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools flake8==6.0.0 flake8-isort==6.0.0
          pip install -r backend/requirements.txt
      - name: Lint with flake8
        run: python -m flake8 backend/

  build_and_push_backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5.0.0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.11.1
      - name: Login to Docker Hub
        uses: docker/login-action@v3.5.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Build and push backend
        uses: docker/build-push-action@v6.18.0
        with:
          context: ./backend
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/kittygram_backend:latest

  build_and_push_frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5.0.0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.11.1
      - name: Login to Docker Hub
        uses: docker/login-action@v3.5.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Build and push frontend
        uses: docker/build-push-action@v6.18.0
        with:
          context: ./frontend
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/kittygram_frontend:latest

  build_and_push_gateway:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5.0.0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.11.1
      - name: Login to Docker Hub
        uses: docker/login-action@v3.5.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Build and push gateway
        uses: docker/build-push-action@v6.18.0
        with:
          context: ./nginx
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/kittygram_gateway:latest

  deploy:
    runs-on: ubuntu-latest
    needs: 
      - build_and_push_backend
      - build_and_push_frontend
      - build_and_push_gateway
    steps:
      - name: Checkout code
        uses: actions/checkout@v5.0.0
      - name: Copy docker-compose.production.yml via ssh
        uses: appleboy/scp-action@v1.0.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          source: "docker-compose.production.yml"
          target: "kittygram"

      - name: Execute remote ssh commands to deploy
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            cd kittygram_final
            export DOCKER_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
            sudo docker-compose --file docker-compose.production.yml pull
            sudo docker-compose --file docker-compose.production.yml down
            sudo docker-compose --file docker-compose.production.yml up -d
            sleep 10
            sudo docker-compose --file docker-compose.production.yml exec -T backend python manage.py migrate
            sudo docker-compose --file docker-compose.production.yml exec -T backend python manage.py collectstatic --noinput
            sudo docker-compose --file docker-compose.production.yml exec -T backend mkdir -p /backend_static/static/
            sudo docker-compose --file docker-compose.production.yml exec -T backend cp -r /app/collected_static/. /backend_static/static/

      - name: Send Telegram Message
        uses: appleboy/telegram-action@v1.0.1
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            Деплой успешно выполнен!
            Frontend: http://${{ secrets.HOST }}:9000
            Backend: http://${{ secrets.HOST }}:9000/api/
